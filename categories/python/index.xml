<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Andy McDonald</title><link>https://andymcdgeo.github.io/categories/python/</link><description>Recent content in Python on Andy McDonald</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 21 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://andymcdgeo.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Loading Well Log Data From DLIS using Python</title><link>https://andymcdgeo.github.io/blog/2021-04-21-loading-well-log-data-from-dlis-using-python/</link><pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-04-21-loading-well-log-data-from-dlis-using-python/</guid><description>Introduction There are a number of different formats that well log and petrophysical data can be stored in. In the earlier articles and notebooks of this series, we have mainly focused on loading data from CSV files (here) and LAS files (here and here). Even though LAS files are one of the common formats, they have a flat structure with a header section containing metadata about the well and the file followed by a series of columns containing values for each logging curve.</description></item><item><title>Adding Formation Data to a Well Log Plot</title><link>https://andymcdgeo.github.io/blog/2021-02-28-adding-formation-data-to-a-well-log-plot/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-02-28-adding-formation-data-to-a-well-log-plot/</guid><description>Introduction Taking well log plots one step further using Python and matplotlib Well log plots are a common visualization tool within geoscience and petrophysics. They allow easy visualization of data (for example, Gamma Ray, Neutron Porosity, Bulk Density, etc) that has been acquired along the length (depth) of a wellbore.
I have previously covered different aspects of making these plots in the following articles:
Displaying Lithology Data on a Well Log Plot Using Python</description></item><item><title>Loading Multiple Well Log LAS Files Using Python</title><link>https://andymcdgeo.github.io/blog/2021-02-14-loading-multiple-well-log-las-files-using-python/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-02-14-loading-multiple-well-log-las-files-using-python/</guid><description>Introduction Log ASCII Standard (LAS) files are a common Oil &amp;amp; Gas industry format for storing and transferring well log data. The data contained within is used to analyze and understand the subsurface, as well as identify potential hydrocarbon reserves. In my previous article: Loading and Displaying Well Log Data, I covered how to load a single LAS file using the LASIO library.
In this article, I expand upon that by showing how to load multiple las files from a subfolder into a single pandas dataframe.</description></item><item><title>Displaying Lithology Data on a Well Log Plot Using Python</title><link>https://andymcdgeo.github.io/blog/2021-02-07-displaying-lithology-on-log-plots-using-python/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-02-07-displaying-lithology-on-log-plots-using-python/</guid><description>Adding lithology information to a well log plot can enhance a petrophysical or geological interpretation. It can be used to understand why some log responses may behave the way they do. This data may have been sourced from a previous mineralogical interpretation or from mud logs.
In my previous article: Enhancing Visualization of Well Logs With Plot Fills, we saw: how to apply fixed color fill between a curve and the edge of a track, how to apply a density-neutron crossover fill and how to apply a variable fill based upon the value of curve being plotted.</description></item><item><title>Displaying Lithology Data on a Well Log Plot Using Python</title><link>https://andymcdgeo.github.io/blog/2021-01-31-displaying-logging-while-drill-lwd-image-logs-in-python/</link><pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-01-31-displaying-logging-while-drill-lwd-image-logs-in-python/</guid><description>Introduction Borehole image logs are false-color pseudo images of the borehole wall generated from different logging measurements/tools. How borehole images are acquired differs between wireline logging and logging while drilling (LWD). In the wireline environment measurements are made from buttons on pads that are pressed up against the borehole wall and provide limited coverage, but at a high resolution. In contrast, in the LWD environment measurements are made from sensors built into tools that form part of the drillstring/tool assembly, and using the tool rotation, provide full 360-degree coverage.</description></item><item><title>Displaying Lithology Data on a Well Log Plot Using Python</title><link>https://andymcdgeo.github.io/blog/2021-01-27-enhancing-visualisation-of-well-logs-with-plot-fills/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2021-01-27-enhancing-visualisation-of-well-logs-with-plot-fills/</guid><description>Matplotlib is a great library to work with in Python and it is one that I always go back to time and time again to work with well logs. Due to its high degree of flexibility it can be tricky to get started with it at first, but once you have mastered the basics it can become a powerful tool for data visualization.
When working with well log data it can be common to apply color fills to the data to help quickly identify areas of interest.</description></item><item><title>Porosity-Permeability Relationships Using Linear Regression in Python</title><link>https://andymcdgeo.github.io/blog/2020-12-28-porosity-permeability-relationships-using-linear-regression-in-python/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2020-12-28-porosity-permeability-relationships-using-linear-regression-in-python/</guid><description>Core data analysis is a key component in the evaluation of a field or discovery, as it provides direct samples of the geological formations in the subsurface over the interval of interest. It is often considered the ‘ground truth’ by many and is used as a reference for calibrating well log measurements and petrophysical analysis. Core data is expensive to obtain and not acquired on every well at every depth. Instead, it may be acquired at discrete intervals on a small number of wells within a field and then used as a reference for other wells.</description></item><item><title>Porosity-Permeability Relationships Using Linear Regression in Python</title><link>https://andymcdgeo.github.io/blog/2020-11-01-exploratory-data-analysis-with-well-log-data/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2020-11-01-exploratory-data-analysis-with-well-log-data/</guid><description>Once data has been collated and sorted through, the next step in the Data Science process is to carry out Exploratory Data Analysis (EDA). This step allows us to identify patterns within the data, understand relationships between the features (well logs) and identify possible outliers that may exist within the dataset. In this stage, we gain an understanding about the data and check whether further processing is required or if cleaning is necessary.</description></item><item><title>Visualising Well Data Coverage Using matplotlib</title><link>https://andymcdgeo.github.io/blog/2020-10-26-visualising-well-data-coverage-using-matplotlib/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2020-10-26-visualising-well-data-coverage-using-matplotlib/</guid><description>Exploratory Data Analysis (EDA) is an integral part of Data Science. The same is true for the petrophysical domain and can often be referred to as the Log QC or data review stage of a project. It is at this stage that we begin to go through the data in detail and identify what data we really have, where we have it and what is the quality of the gathered data.</description></item><item><title>Petrophysics: Gamma Ray Normalization in Python</title><link>https://andymcdgeo.github.io/blog/2020-10-18-petrophysics-gamma-ray-normalisation-in-python/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2020-10-18-petrophysics-gamma-ray-normalisation-in-python/</guid><description>Normalization of well log data is a common and routine process within a petrophysical workflow and is used to correct for variations in logging curves between wells. These variations can arise due a number of different reasons such as incorrect tool calibrations, varying tool vintage and changes in borehole environmental conditions between the wells.
In this article we will go over:
What normalization is
Why we want to normalize well log data</description></item><item><title>Loading and Displaying Well Log Data from LAS Files with Python</title><link>https://andymcdgeo.github.io/blog/2020-08-30-loading-and-displaying-well-log-data-from-las-files-with-python/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>https://andymcdgeo.github.io/blog/2020-08-30-loading-and-displaying-well-log-data-from-las-files-with-python/</guid><description>Anyone who has worked or is currently working within the oil and gas industry will understand that there are a large variety of formats that well log data can be stored in. Some of the common formats that we as petrophysicists work with include LAS, ASCII and CSV files. Many of these formats can easily be loaded into a Python script ot Jupyter Notebook.
Many months back, I put together a series of Jupyter Notebooks illustrating different ways of working with well log data.</description></item></channel></rss>